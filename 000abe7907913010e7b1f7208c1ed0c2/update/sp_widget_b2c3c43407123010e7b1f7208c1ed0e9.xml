<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>sc</category>
        <client_script><![CDATA[function ($scope, $http, nowServer, $timeout, spUtil) {
	$scope.m = $scope.data.msgs;
	$scope.evaluatingIncludes = false;
	// field changed event comes from glideFormFactory
	$scope.submitButtonMsg = $scope.m.submitMsg;
	$scope.$on("field.change", function(evt, parms) {
		if (!parms.field.guide_implications)
			return;

		if ($scope.data.sc_cat_item.cascade)
			cascadeSingleVarToItems(parms.field);
		evalIncludes();
	})

	// When the mandatory list changes inside sp-model
	$scope.$on("variable.mandatory.change", function() {
		flattenMandatory();
	})

	$scope.$on("guide.item.price.change", function(evt, parms) {
		evalGuidePrice();
	})

	$scope.scrollTo = function(item) {
		spUtil.scrollTo("#" + item.sys_id);
	}

	$scope.scrollToVar = function(v) {
		spUtil.scrollTo("#" + v.sys_id);
	}

	// Breadcrumbs
	if ($scope.data.sc_cat_item) {
		var bc = [{label: $scope.options.title || $scope.m.scHomeMsg, url: '?id=' + $scope.data.sc_catalog_page}];
		if ($scope.data.category)
			bc[bc.length] = {label: $scope.data.category.name, url: $scope.data.category.url};

		bc[bc.length] = {label: $scope.data.sc_cat_item.name, url: '#'};
		$timeout(function() {
			$scope.$emit('sp.update.breadcrumbs', bc);
		});
		spUtil.setSearchPage('sc');
	} else {
		var notFoundBC = [{label: $scope.page.title, url: '?id=' + $scope.data.sc_catalog_page}];
		$timeout(function() {
			$scope.$emit('sp.update.breadcrumbs', notFoundBC);
		});
		spUtil.setSearchPage('sc');
	}

	var includedGformInstances = {};
	$scope.$on('spModel.gForm.initialized', function(e, gFormInstance) {
		if (gFormInstance.getSysId() == '-1')
			return;
		includedGformInstances[gFormInstance.getSysId()] = gFormInstance;
		if ($scope.data.sc_cat_item.cascade)
			cascadeVarsToSingleItem(gFormInstance);

		// This runs after all onSubmit scripts have executed
		gFormInstance.$private.events.on('submitted', function() {
			gFormInstance.submitted = true;
			trySubmit();
		});
	});

	$scope.$on('spModel.gForm.destroyed', function(e, sys_id){
		delete includedGformInstances[sys_id];
	});

	$scope.triggerOnSubmit = function() {
		if ($scope.evaluatingIncludes) {
			$timeout($scope.triggerOnSubmit, 100);
			return;
		}
		
		var gForm;
		// Run onSubmit scripts for every included g_form instance
		for(var gf in includedGformInstances) {
			gForm = includedGformInstances[gf];
			if (gForm)
				gForm.submit();
		}
	};

	// cascade a single Order Guide variable to all items
	function cascadeSingleVarToItems(field /* "IO:sys_id" */) {
		var varName = field.name;
		for (var gf in includedGformInstances) {
			var gForm = includedGformInstances[gf];
			if (!gForm.hasField(varName))
				continue;

			if (gForm.getValue(varName) != field.value)
				gForm.setValue(varName, field.value, field.displayValue);
		}
	}

	// cascade all Order Guide variables to a single item
	function cascadeVarsToSingleItem(gForm) {
		var guide = $scope.data.sc_cat_item;
		if (!guide)
			return;

		for (var guideField in guide._fields) {
			if (!gForm.hasField(guide._fields[guideField].name))
				continue;

			if (gForm.getValue(guide._fields[guideField].name) != guide._fields[guideField].value)
				gForm.setValue(guide._fields[guideField].name, guide._fields[guideField].value, guide._fields[guideField].displayValue);
		}
	}

	// order / create request
	function trySubmit() {
		var gForm;
		// verify every gForm instance has finished its validation
		for(var gf in includedGformInstances) {
			gForm = includedGformInstances[gf];
			if (gForm && gForm.submitted !== true)
				return;
		}

		if ($scope.submitted)
			return;

		$scope.submitted = true;
		$scope.submitting = true;
		setFieldsReadonly();
		$http.post(spUtil.getURL('sc_cat_item_guide'), {"items": $scope.included, "sc_cat_item_guide": $scope.data.sys_id}).success(function(response) {
			var a = response.answer;
			var n = a.number;
			$scope.$emit("$$uiNotification", response.$$uiNotification);
			$scope.$emit("$sp.sc_order_guide.submitted", a);
			if (n)
				issueMessage(n, a.table, a.sys_id);
			$scope.submitting = false;
			$scope.submitButtonMsg = $scope.m.submittedMsg;
		})
	}

	function setFieldsReadonly() {
		var gForm, allFields;
		for(var gf in includedGformInstances) {
			gForm = includedGformInstances[gf];
			allFields = gForm.getFieldNames();
			for(var fieldName in allFields) {
				gForm.setReadOnly(allFields[fieldName], true);
			}
		}
	}

	var mandatoryCollectionBounce;
	$scope.flatMandatory = [];
	function flattenMandatory() {
		$timeout.cancel(mandatoryCollectionBounce);
		mandatoryCollectionBounce = $timeout(function(){
			$scope.flatMandatory = [];
			angular.forEach($scope.data.sc_cat_item._mandatory, function(field) {
					$scope.flatMandatory.push(field);
				});
			angular.forEach($scope.included, function(item) {
				angular.forEach(item._mandatory, function(field) {
					$scope.flatMandatory.push(field);
				});
			});
		}, 80);
	}

	// spModel populates mandatory - this is called the submit button
	$scope.hasMandatory = function() {
		return $scope.flatMandatory.length;
	}

	function issueMessage(n, table, sys_id) {
		var page = table == 'sc_request' ? 'sc_request' : 'ticket';
		var t = $scope.m.createdMsg + " " + n + " - ";
		t += $scope.m.trackMsg;
		t += ' <a href="?id=' + page + '&table=' + table + '&sys_id=' +
			sys_id + '">' + $scope.m.clickMsg + '</a>';
		spUtil.addInfoMessage(t);
	}

	function evalGuidePrice() {
		$timeout(function(){
			var price = 0;
			var rprice = 0;
			for (var i = 0; i < $scope.included.length; i++) {
				var pricing = $scope.included[i]._pricing;
				if (typeof pricing.price_total != "undefined")
					price += pricing.price_total;
				else
					price += pricing.price;
			}
			$scope.price = price;
			var o = {price: price};
			$http.post(spUtil.getURL('format_prices'), o).success(function(response) {
				$scope.price_display = response.price;
			})
		})
	}

	function evalIncludes(name, value) {
		// don't allow submit while waiting on included items eval
		$scope.evaluatingIncludes = true;
		$http.post(spUtil.getURL('sc_order_guide_eval'), $scope.data.sc_cat_item).success(function(response) {
			$scope.included = [];
			if ($scope.data.sc_cat_item) {
				$scope.data.sc_cat_item._items.forEach(function(item) {
					if (response.hasOwnProperty(item._item.sys_id)) {
						// Used by spModel for "g_form.isOrderGuideItem()"
						item._item.isOrderGuideItem = true;
						$scope.included.push(item._item);
					}
				})
			}

			evalGuidePrice();
			flattenMandatory();
			$scope.evaluatingIncludes = false;
		}).error(function() {
			$scope.evaluatingIncludes = false;
		});
	}
	if ($scope.data.sc_cat_item)
		$timeout(evalIncludes);
}]]></client_script>
        <controller_as>c</controller_as>
        <css>.guide-image {
  max-height: 240px;
  max-width: 360px;
  padding: 20px;
}

.guide-item-image {
  max-height: 150px;
  padding: 10px;
}

.sp-sc-single-checkbox&gt;div {
  display : inline !important;
}</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description>payment_request_summary</description>
        <docs/>
        <field_list>title,color</field_list>
        <has_preview>false</has_preview>
        <id>payment_request_summary</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {  }]]></link>
        <name>payment_request_summary</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function () {
	// portal can specify a catalog and category home page
	data.sc_catalog_page = $sp.getDisplayValue("sc_catalog_page") || "sc_home";
	data.sc_category_page = $sp.getDisplayValue("sc_category_page") || "sc_category";

	var m = data.msgs = {};
	m.submitMsg = gs.getMessage("Submit");
	m.submittedMsg = gs.getMessage("Submitted");
	m.createdMsg = gs.getMessage("Created");
	m.trackMsg = gs.getMessage("track using 'Requests' in the header or");
	m.clickMsg = gs.getMessage("click here to view");
	m.scHomeMsg = gs.getMessage("Service Catalog");

	data.sys_id = $sp.getParameter("sys_id");

	if (options.sys_id)
		data.sys_id = options.sys_id;

	if (!data.sys_id)
		return;

	var validatedItem = new sn_sc.CatItem('' + data.sys_id);
	if (!validatedItem.canView() || !validatedItem.isVisibleServicePortal())
		return;

	data.showPrices = $sp.showCatalogPrices();
  data.sc_cat_item = $sp.getCatalogItem({
		sys_id: data.sys_id + '',
		is_guide: true,
		is_ordering: true
	});
	if (data.sc_cat_item.category) {
		var categoryGR = new GlideRecord('sc_category');
		categoryGR.get(data.sc_cat_item.category);
		data.category = {
			name: categoryGR.getDisplayValue('title'),
			url: '?id='+data.sc_category_page+'&sys_id=' + categoryGR.sys_id
		};
	}

	$sp.logStat('Catalog Order Guide View', data.sc_cat_item.sys_class_name, data.sys_id);
})();
]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2021-08-28 04:05:13</sys_created_on>
        <sys_id>b2c3c43407123010e7b1f7208c1ed0e9</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_name>payment_request_summary</sys_name>
        <sys_package display_value="Payment Requests" source="x_661994_paymt_req">000abe7907913010e7b1f7208c1ed0c2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Payment Requests">000abe7907913010e7b1f7208c1ed0c2</sys_scope>
        <sys_update_name>sp_widget_b2c3c43407123010e7b1f7208c1ed0e9</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2021-08-28 04:05:53</sys_updated_on>
        <template><![CDATA[<div class="container">
  <div ng-if="::data.sc_cat_item" class="row">

    <div class="col-sm-9">
      <div class="panel panel-default">
        <div class="wrapper-md">
          <h1 class="h2 m-n font-thin">{{data.sc_cat_item.name}}</h1>
          <div ng-if="::data.sc_cat_item.picture">
            <img class="img-responsive catalog-item-image guide-image" style="display: inline" ng-src="{{::data.sc_cat_item.picture}}" />
          </div>
          <div ng-if="data.sc_cat_item.description" class="m-t" ng-bind-html="data.sc_cat_item.description"></div>
        </div>
        <div class="wrapper-md b-t">
          <sp-model form-model="data.sc_cat_item" mandatory="data.sc_cat_item._mandatory" ></sp-model>
        </div>
      </div>

      <div class="panel panel-default" ng-if="included.length">
        <div class="wrapper-md">
          <h1 class="h2 m-n font-thin">${Included Items...}</h1>
        </div>

        <div class="wrapper-md b-t">
          <div class="panel panel-default" ng-repeat="item in included | orderBy: 'order'" id="{{item.sys_id}}">
            <div class="panel-heading"><h4>{{item.name}}</h4></div>
            <div class="panel-body">
              <div ng-if="::item.picture">
				        <img class="img-responsive catalog-item-image guide-item-image" style="display: inline" ng-src="{{::item.picture}}" />
              </div>
              <div>{{item.short_description}}</div>
              <sp-cat-item item="item" />
              <sp-model form-model="item" mandatory="item._mandatory"></sp-model>
            </div>
            <div ng-if="data.showPrices && (item.price || item.recurring_price)" class="panel-footer bg-white">{{item.price}} {{item.recurring_price}}</div>
          </div>
        </div>

      </div>
    </div>

    <div class="col-sm-3">
      <div class="panel panel-default">

        <div class="panel-heading">
          <h4 class="panel-title">${Items}</h4>
        </div>

        <div ng-if="included.length > 0" class="list-group">
          <a class="list-group-item" href=""
             ng-click="scrollTo(item)"
             ng-repeat="item in included | orderBy: 'order'">
            <i class="fa fa-chevron-right m-r-sm"></i>
            {{item.name}}
          </a>
        </div>

        <div class="wrapper-md">
          <div class="m-b-xs" ng-if="data.showPrices && price">${Total price}: {{price_display}}</div>
          <button ng-disabled="submitted" name="submit" ng-click="triggerOnSubmit()" class="btn btn-primary">{{submitButtonMsg}}</button>
          <span ng-if="submitting" style="padding-left:4px">${Submitting...}</span>
          <div ng-if="hasMandatory()" class="alert alert-info" style="margin-top: .5em">
            <span ng-if="flatMandatory.length > 0">${Required information} </span>
            <span ng-repeat="f in flatMandatory" class="label label-danger" ng-click="scrollToVar(f)" style="margin-right: 1em;display:inline-block;text-align:inherit;white-space:inherit;margin-top:.3em">{{f.label}}</span>
          </div>
        </div>
      </div>
    </div>

  </div>

  <div ng-if="::!data.sc_cat_item" >
    <div class="panel panel-default">
      <div class="panel-heading"><h4 class="panel-title">${Item not found}</h4></div>
      <div class="panel-body wrapper">
        <p>${This item is not found or currently not available}</p>
        <p>${Suggestions}:</p>
        <ul>
          <li>${Try searching for the item}</li>
          <li>${Go to the Service Catalog homepage}</li>
        </ul>
      </div>
    </div>
  </div>
</div>]]></template>
    </sp_widget>
</record_update>
